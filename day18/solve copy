package day18_C

import (
	"bufio"
	"log"
	"math"
	"os"
	"strconv"
	"unicode"
)

type Node struct {
	left       *Node
	right      *Node
	valueLeft  int
	valueRight int
}

func Solve() string {
	file, err := os.Open("day18/input.txt")
	if err != nil {
		log.Fatal(err)
	}
	scanner := bufio.NewScanner(file)
	lines := make([]*Node, 0)
	for scanner.Scan() {
		node := &Node{}
		parseLine([]rune(scanner.Text())[1:], node)
		lines = append(lines, node)
	}
	node := lines[0]
	for i := 1; i < len(lines)-1; i++ {
		node = add(node, lines[i])
	}
	// split(node)
	return node.toString()
}

func parseLine(line []rune, tree *Node) *Node {
	if len(line) == 0 {
		return tree
	}
	thing := line[0]

	if thing == '[' {
		tree.left = parseLine(line[1:], &Node{})
	} else if unicode.IsDigit(thing) {
		tree.valueLeft = int(thing) - '0'

		if unicode.IsDigit(line[2]) {
			tree.valueRight = int(line[2]) - '0'
			return tree
		}
		tree.right = parseLine(line[2:], &Node{})
	}
	return tree
}

func add(a *Node, b *Node) *Node {
	return &Node{left: a, right: b}
}

func explode(n *Node, d int) {
	if d <= 4 {
		if n.left != nil {
			explode(n.left, d+1)
		} else if n.right != nil {
			explode(n.right, d+1)
		}
	}
}

func split(n *Node) {
	if n == nil {
		return
	}
	if n.valueLeft >= 10 {
		left := n.valueLeft / 2
		right := math.Ceil((float64(n.valueLeft) / 2.0))
		n.left = &Node{valueLeft: left, valueRight: int(right)}
		n.valueLeft = 0
	} else {
		split(n.left)
	}
	if n.valueRight >= 10 {
		left := n.valueRight / 2
		right := math.Ceil((float64(n.valueRight) / 2.0))
		n.right = &Node{valueLeft: left, valueRight: int(right)}
		n.valueRight = 0
	} else {
		split(n.right)
	}
}

func (n *Node) toString() string {
	val := "["
	if n.left != nil {
		val += n.left.toString()
	} else {
		val += strconv.Itoa(n.valueLeft)
	}
	val += ","
	if n.right != nil {
		val += n.right.toString()
	} else {
		val += strconv.Itoa(n.valueRight)
	}

	return val + "]"
}
